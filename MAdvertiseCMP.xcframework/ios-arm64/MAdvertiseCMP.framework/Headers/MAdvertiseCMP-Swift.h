#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef MADVERTISECMP_SWIFT_H
#define MADVERTISECMP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MAdvertiseCMP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MAdvertiseCMP9CMPButton")
@interface CMPButton : NSObject
/// The id of the CMPButton.
@property (nonatomic, readonly) NSInteger id;
/// The name of the CMPButton.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The key of the CMPButton.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The marginTop of the CMPButton.
@property (nonatomic, readonly) NSInteger marginTop;
/// The marginBottom of the CMPButton.
@property (nonatomic, readonly) NSInteger marginBottom;
/// The opacity of the CMPButton.
@property (nonatomic, readonly) double opacity;
/// Initialize a new instance of CMPButton.
/// \param id The id of the CMPButton.
///
/// \param name The name of the CMPButton.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name key:(NSString * _Nonnull)key marginTop:(NSInteger)marginTop marginBottom:(NSInteger)marginBottom opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CMPConsentManagerDelegate;
@class TCFString;
@class MadvertiseConsentString;
@class CMPLanguage;
@class CMPConsentToolConfiguration;
@class UIViewController;

/// A class to manage the CMP.
SWIFT_CLASS("_TtC13MAdvertiseCMP17CMPConsentManager")
@interface CMPConsentManager : NSObject
/// Returns the shared CMPConsentManager object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPConsentManager * _Nonnull sharedInstance;)
+ (CMPConsentManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// CMPConsentManager delegate.
@property (nonatomic, weak) id <CMPConsentManagerDelegate> _Nullable delegate;
/// Must be set as soon as the publisher knows whether or not the user is subject to GDPR law, for example after looking up the user’s location, or if the publisher himself is subject to this regulation.
@property (nonatomic) BOOL subjectToGDPR;
@property (nonatomic, strong) TCFString * _Nullable tcfString;
/// The madvertiseConsent string.
@property (nonatomic, strong) MadvertiseConsentString * _Nullable madvertiseConsentString;
/// The default refresh interval for the vendor list.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double DEFAULT_VENDORLIST_REFRESH_TIME;)
+ (double)DEFAULT_VENDORLIST_REFRESH_TIME SWIFT_WARN_UNUSED_RESULT;
/// The default refresh interval for the purpose Madvertise list.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double DEFAULT_MADVERTISE_PURPOSE_LIST_REFRESH_TIME;)
+ (double)DEFAULT_MADVERTISE_PURPOSE_LIST_REFRESH_TIME SWIFT_WARN_UNUSED_RESULT;
/// The behavior if LAT (Limited Ad Tracking) is enabled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL DEFAULT_LAT_VALUE;)
+ (BOOL)DEFAULT_LAT_VALUE SWIFT_WARN_UNUSED_RESULT;
/// Configure the CMPConsentManager. This method must be called only once per session.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     language: an instance of CMPLanguage reflecting the device’s current language.
///   </li>
///   <li>
///     consentToolConfiguration: an instance of CMPConsentToolConfiguration to configure of the consent tool UI.
///   </li>
/// </ul>
- (void)configure:(NSString * _Nonnull)configfile language:(CMPLanguage * _Nonnull)language appId:(NSString * _Nonnull)appId publisherCC:(NSString * _Nonnull)publisherCC;
- (void)configureWithoutShowCmpWithAppId:(NSString * _Nonnull)appId publisherCC:(NSString * _Nonnull)publisherCC;
- (void)configure:(NSString * _Nonnull)configfile language:(CMPLanguage * _Nonnull)language appId:(NSString * _Nonnull)appId publisherCC:(NSString * _Nonnull)publisherCC autoClose:(BOOL)autoClose;
/// Configure the CMPConsentManager. This method must be called only once per session.
/// Note: if you set ‘showConsentToolWhenLimitedAdTracking’ to true, you will be able to ask for user consent even if ‘Limited Ad
/// Tracking’ has been enabled on the device. In this case, remember that you still have to comply to Apple’s App Store Terms and
/// Conditions regarding ‘Limited Ad Tracking’.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     vendorListURL: The URL from where to fetch the vendor list (vendors.json). If you enter your own URL, your custom list MUST BE compatible with IAB specifications and respect vendorId and purposeId distributed by the IAB.
///   </li>
///   <li>
///     refreshInterval: The interval in seconds to refresh the vendor list.
///   </li>
///   <li>
///     language: an instance of CMPLanguage reflecting the device’s current language.
///   </li>
///   <li>
///     consentToolConfiguration: an instance of CMPConsentToolConfiguration to configure of the consent tool UI.
///   </li>
///   <li>
///     showConsentToolWhenLimitedAdTracking: Whether or not the consent tool UI should be shown if the user has enabled ‘Limit Ad Tracking’ in his device’s preferences. If false, the consent tool will never be shown if user has enabled ‘Limit Ad Tracking’ and the consent string will be formatted has ‘user does not give consent’. Note that if you have provided a delegate, it will not be called either.
///   </li>
/// </ul>
- (void)configureWithRefreshInterval:(NSTimeInterval)refreshInterval language:(CMPLanguage * _Nonnull)language consentToolConfiguration:(CMPConsentToolConfiguration * _Nullable)consentToolConfiguration showConsentToolWhenLimitedAdTracking:(BOOL)showConsentToolWhenLimitedAdTracking appId:(NSString * _Nonnull)appId publisherCC:(NSString * _Nonnull)publisherCC;
/// Forces an immediate refresh of the vendors list.
- (void)refreshVendorsList;
- (BOOL)showConsentToolFromController:(UIViewController * _Nonnull)controller withPopup:(BOOL)withPopup SWIFT_WARN_UNUSED_RESULT;
- (void)acceptAllConsentTool;
- (void)refuseAllConsentTool;
- (NSArray<NSNumber *> * _Nonnull)getExternalPurposesIDs SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getPurposesIDs SWIFT_WARN_UNUSED_RESULT;
- (void)updateExternalPurposesIDs:(NSArray<NSNumber *> * _Nonnull)externalPurposes vendors:(NSArray<NSNumber *> * _Nullable)vendors externalvendors:(NSArray<NSNumber *> * _Nullable)externalvendors type:(BOOL)type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CMPVendorList;

/// Delegate of CMPConsentManager.
SWIFT_PROTOCOL("_TtP13MAdvertiseCMP25CMPConsentManagerDelegate_")
@protocol CMPConsentManagerDelegate
@optional
/// Called when the consent manager found a reason to display the Consent Tool UI. The publisher should display
/// the consent tool as soon as possible.
/// Note: this delegate will never be called if ‘showConsentToolWhenLimitedAdTracking=false’ is used during the CMPConsentManager
/// configuration and if the user has enabled ‘Limited Ad Tracking’ in its iOS preferences. In this case, a consent string without
/// any consent will be automatically generated and stored.
/// \param consentManager The consent manager instance.
///
/// \param vendorList The vendor list you should ask consent for.
///
- (void)consentManagerRequestsToShowConsentTool:(CMPConsentManager * _Nonnull)consentManager forVendorList:(CMPVendorList * _Nonnull)vendorList;
- (void)tcfConsentStringDidChange:(TCFString * _Nonnull)newTcfConsentString SWIFT_DEPRECATED_MSG("Implement tcfOnConsentStringDidChange:consentProvided: ");
- (void)tcfOnConsentStringDidChange:(TCFString * _Nonnull)newTcfConsentString consentProvided:(NSString * _Nonnull)consentProvided;
- (void)consentManagerRequestsToPresentPrivacyPolicyWithUrl:(NSString * _Nonnull)url;
- (void)didAcceptAllTcfConsentString;
- (void)didRefuseAllTcfConsentString;
- (void)consentManagerDidFailWithErrorWithError:(NSError * _Nonnull)error;
@end

@class NSDate;
@class NSIndexSet;
@class CMPVersionConfig;

/// Representation of an IAB consent string.
SWIFT_CLASS("_TtC13MAdvertiseCMP16CMPConsentString")
@interface CMPConsentString : NSObject <NSCopying>
/// The consent string version.
@property (nonatomic, readonly) NSInteger version;
/// The date of the first consent string creation.
@property (nonatomic, readonly, copy) NSDate * _Nonnull created;
/// The date of the last consent string update.
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
/// The id of the last Consent Manager Provider that updated the consent string.
@property (nonatomic, readonly) NSInteger cmpId;
/// The version of the Consent Manager Provider.
@property (nonatomic, readonly) NSInteger cmpVersion;
/// The screen number in the CMP where the consent was given.
@property (nonatomic, readonly) NSInteger consentScreen;
/// The language that the CMP asked for consent in.
@property (nonatomic, readonly, strong) CMPLanguage * _Nonnull consentLanguage;
/// The version of the vendor list used in the most recent consent string update.
@property (nonatomic, readonly) NSInteger vendorListVersion;
/// The maximum vendor id that can be found in the current vendor list.
@property (nonatomic, readonly) NSInteger maxVendorId;
/// An array of allowed purposes id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedPurposes;
/// An array of allowed vendors id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedVendors;
/// The base64 representation of the consent string.
@property (nonatomic, readonly, copy) NSString * _Nonnull consentString;
/// The ‘parsed purpose consents’ string that can be stored in the IABConsent_ParsedPurposeConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedPurposeConsents;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedVendorConsents;
/// Initialize a new instance of CMPConsentString from a vendor list.
/// \param version The consent string version.
///
/// \param created The date of the first consent string creation.
///
/// \param lastUpdated The date of the last consent string update.
///
/// \param cmpId The id of the last Consent Manager Provider that updated the consent string.
///
/// \param cmpVersion The version of the Consent Manager Provider.
///
/// \param consentScreen The screen number in the CMP where the consent was given.
///
/// \param consentLanguage The language that the CMP asked for consent in.
///
/// \param allowedPurposes An array of allowed purposes id.
///
/// \param allowedVendors An array of allowed vendors id.
///
/// \param vendorList The vendor list corresponding to the consent string.
///
///
/// returns:
/// A new instance of CMPConsentString if version is valid, nil otherwise.
- (nullable instancetype)initWithVersion:(NSInteger)version created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors vendorList:(CMPVendorList * _Nonnull)vendorList;
/// Initialize a new instance of CMPConsentString using a vendor list version and a max vendor id.
/// \param version The consent string version.
///
/// \param created The date of the first consent string creation.
///
/// \param lastUpdated The date of the last consent string update.
///
/// \param cmpId The id of the last Consent Manager Provider that updated the consent string.
///
/// \param cmpVersion The version of the Consent Manager Provider.
///
/// \param consentScreen The screen number in the CMP where the consent was given.
///
/// \param consentLanguage The language that the CMP asked for consent in.
///
/// \param vendorListVersion The version of the vendor list used in the most recent consent string update.
///
/// \param maxVendorId The maximum vendor id that can be found in the current vendor list.
///
/// \param allowedPurposes An array of allowed purposes id.
///
/// \param allowedVendors An array of allowed vendors id.
///
///
/// returns:
/// A new instance of CMPConsentString if version is valid, nil otherwise.
- (nullable instancetype)initWithVersion:(NSInteger)version created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage vendorListVersion:(NSInteger)vendorListVersion maxVendorId:(NSInteger)maxVendorId allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors;
/// Initialize a new instance of CMPConsentString from a vendor list.
/// \param versionConfig The consent string version configuration.
///
/// \param created The date of the first consent string creation.
///
/// \param lastUpdated The date of the last consent string update.
///
/// \param cmpId The id of the last Consent Manager Provider that updated the consent string.
///
/// \param cmpVersion The version of the Consent Manager Provider.
///
/// \param consentScreen The screen number in the CMP where the consent was given.
///
/// \param consentLanguage The language that the CMP asked for consent in.
///
/// \param allowedPurposes An array of allowed purposes id.
///
/// \param allowedVendors An array of allowed vendors id.
///
/// \param vendorList The vendor list corresponding to the consent string.
///
- (nonnull instancetype)initWithVersionConfig:(CMPVersionConfig * _Nonnull)versionConfig created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors vendorList:(CMPVendorList * _Nonnull)vendorList;
/// Initialize a new instance of CMPConsentString using a vendor list version and a max vendor id.
/// \param versionConfig The consent string version configuration.
///
/// \param created The date of the first consent string creation.
///
/// \param lastUpdated The date of the last consent string update.
///
/// \param cmpId The id of the last Consent Manager Provider that updated the consent string.
///
/// \param cmpVersion The version of the Consent Manager Provider.
///
/// \param consentScreen The screen number in the CMP where the consent was given.
///
/// \param consentLanguage The language that the CMP asked for consent in.
///
/// \param vendorListVersion The version of the vendor list used in the most recent consent string update.
///
/// \param maxVendorId The maximum vendor id that can be found in the current vendor list.
///
/// \param allowedPurposes An array of allowed purposes id.
///
/// \param allowedVendors An array of allowed vendors id.
///
- (nonnull instancetype)initWithVersionConfig:(CMPVersionConfig * _Nonnull)versionConfig created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage vendorListVersion:(NSInteger)vendorListVersion maxVendorId:(NSInteger)maxVendorId allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors;
/// Check if a purpose is allowed by the consent string.
/// \param purposeId The purpose id which should be checked.
///
///
/// returns:
/// true if the purpose is allowed, false otherwise.
- (BOOL)isPurposeAllowedWithPurposeId:(NSInteger)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Check if a vendor is allowed by the consent string.
/// \param vendorId The vendor id which should be checked.
///
///
/// returns:
/// true if the vendor is allowed, false otherwise.
- (BOOL)isVendorAllowedWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Returns a new instance of CMPConsentString from a base64 string.
/// \param base64String The base64 consent string.
///
///
/// returns:
/// A new instance of CMPConsentString if the string is valid, nil otherwise.
+ (CMPConsentString * _Nullable)fromBase64:(NSString * _Nonnull)base64String SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// The configuration class of CMPConsentToolManager.
SWIFT_CLASS("_TtC13MAdvertiseCMP27CMPConsentToolConfiguration")
@interface CMPConsentToolConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@class UIView;
@class UIStoryboardSegue;
@class NSBundle;
@class NSCoder;

/// Consent tool preferences view controller.
SWIFT_CLASS("_TtC13MAdvertiseCMP39CMPConsentToolPreferencesViewController")
@interface CMPConsentToolPreferencesViewController : UITableViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC13MAdvertiseCMP17CMPExternalVendor")
@interface CMPExternalVendor : NSObject
/// The id of the CMPExternalVendor.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The name of the CMPExternalVendor.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The policyUrl of the CMPExternalVendor.
@property (nonatomic, readonly, copy) NSURL * _Nullable policyUrl;
/// The list of purposes related to this vendor.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull purposes;
/// The list of external purpose related to this vendor.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull externalpurpose;
/// The list of special purpose related to this vendor.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull specialPurposes;
/// The list of features related to this vendor.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull features;
/// The list of special Features related to this vendor.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull specialFeatures;
/// Initialize a new instance of CMPExternalVendor.
/// \param id The id of the CMPExternalVendor.
///
/// \param name The name of the CMPExternalVendor.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name policyUrl:(NSURL * _Nullable)policyUrl purposes:(NSArray<NSNumber *> * _Nonnull)purposes externalpurpose:(NSArray<NSNumber *> * _Nonnull)externalpurpose specialPurposes:(NSArray<NSNumber *> * _Nonnull)specialPurposes features:(NSArray<NSNumber *> * _Nonnull)features specialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representation of a feature.
SWIFT_CLASS("_TtC13MAdvertiseCMP10CMPFeature")
@interface CMPFeature : NSObject
/// The id of the feature.
@property (nonatomic, readonly) NSInteger id;
/// The name of the feature.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The description of the feature.
@property (nonatomic, readonly, copy) NSString * _Nonnull featureDescription;
/// The Legal description of the feature.
@property (nonatomic, readonly, copy) NSString * _Nonnull featureDescriptionLegal;
/// Initialize a new instance of CMPFeature.
/// \param id The id of the feature.
///
/// \param name The name of the feature.
///
/// \param description The description of the feature.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name description:(NSString * _Nonnull)description descriptionLegal:(NSString * _Nonnull)descriptionLegal OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ISO 639-1 language representation for the CMPConsentString
SWIFT_CLASS("_TtC13MAdvertiseCMP11CMPLanguage")
@interface CMPLanguage : NSObject
/// The CMP default language (‘en’ / English).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPLanguage * _Nonnull DEFAULT_LANGUAGE;)
+ (CMPLanguage * _Nonnull)DEFAULT_LANGUAGE SWIFT_WARN_UNUSED_RESULT;
/// The list of valid letters for the language string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull VALID_LETTERS;)
+ (NSArray<NSString *> * _Nonnull)VALID_LETTERS SWIFT_WARN_UNUSED_RESULT;
/// The valid length for the language string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VALID_LENGTH;)
+ (NSInteger)VALID_LENGTH SWIFT_WARN_UNUSED_RESULT;
/// The string representation of the CMPLanguage instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// The CMP default language (‘en’ / English).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull EUROPE_LANGUAGES;)
+ (NSArray<NSString *> * _Nonnull)EUROPE_LANGUAGES SWIFT_WARN_UNUSED_RESULT;
/// Initialize a new instance of CMPLanguage from a string representation.
/// \param string The string representation of the language (it must be ISO 639-1 compliant).
///
///
/// returns:
/// A CMPLanguage instance if the string is valid, nil otherwise.
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MAdvertiseCMP28CMPPublisherRestrictionEntry")
@interface CMPPublisherRestrictionEntry : NSObject
@property (nonatomic) NSInteger purposeId;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull vendors;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representation of a purpose.
SWIFT_CLASS("_TtC13MAdvertiseCMP10CMPPurpose")
@interface CMPPurpose : NSObject
/// The id of the purpose.
@property (nonatomic, readonly) NSInteger id;
/// The name of the purpose.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The description of the purpose.
@property (nonatomic, readonly, copy) NSString * _Nonnull purposeDescription;
/// The Legal description of the purpose.
@property (nonatomic, readonly, copy) NSString * _Nonnull purposeDescriptionLegal;
/// Initialize a new instance of CMPPurpose.
/// \param id The id of the purpose.
///
/// \param name The name of the purpose.
///
/// \param description The description of the purpose.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name description:(NSString * _Nonnull)description descriptionLegal:(NSString * _Nonnull)descriptionLegal OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MAdvertiseCMP8CMPStack")
@interface CMPStack : NSObject
/// The id of the stack.
@property (nonatomic, readonly) NSInteger id;
/// The name of the stack.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The description of the stack.
@property (nonatomic, readonly, copy) NSString * _Nonnull stackDescription;
/// A list of Purposes.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull purposes;
/// A list of specialFeatures.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull specialFeatures;
/// A list of specialFeatures.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull externalPurposes;
/// Initialize a new instance of CMPStack.
/// \param id The id of the stack.
///
/// \param name The name of the stack.
///
/// \param description The description of the stack.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name description:(NSString * _Nonnull)description purposes:(NSArray<NSNumber *> * _Nonnull)purposes specialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures externalPurposes:(NSArray<NSNumber *> * _Nonnull)externalPurposes OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representation of a vendor.
SWIFT_CLASS("_TtC13MAdvertiseCMP9CMPVendor")
@interface CMPVendor : NSObject
/// The id of the vendor.
@property (nonatomic, readonly) NSInteger id;
/// The name of the vendor.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The list of purposes related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull purposes;
/// The list of legitimate (aka non-consentable) purposes related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull legitimatePurposes;
/// The list of features related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull features;
/// The privacy policy’s URL for this vendor if any, nil otherwise.
@property (nonatomic, readonly, copy) NSURL * _Nullable policyURL;
/// The list of special Purposes related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull specialPurposes;
/// The list of special Features related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull specialFeatures;
/// The list of external purpose related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull externalpurpose;
/// The list of flexible purpose related to this vendor.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull flexiblePurposes;
/// A date of deletion of this vendor has been marked as deleted, nil otherwise.
@property (nonatomic, readonly, copy) NSDate * _Nullable deletedDate;
/// true if the vendor is activated (ie not deleted), false otherwise.
@property (nonatomic, readonly) BOOL isActivated;
/// Initialize a new instance of CMPVendor.
/// \param id The id of the vendor.
///
/// \param name The name of the vendor.
///
/// \param purposes The list of purposes related to this vendor.
///
/// \param legitimatePurposes The list of legitimate (aka non-consentable) purposes related to this vendor.
///
/// \param features The list of features related to this vendor.
///
/// \param policyURL The privacy policy’s URL for this vendor.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name purposes:(NSArray<NSNumber *> * _Nonnull)purposes legitimatePurposes:(NSArray<NSNumber *> * _Nonnull)legitimatePurposes flexiblePurposes:(NSArray<NSNumber *> * _Nonnull)flexiblePurposes specialPurposes:(NSArray<NSNumber *> * _Nonnull)specialPurposes features:(NSArray<NSNumber *> * _Nonnull)features specialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures policyURL:(NSURL * _Nullable)policyURL externalpurpose:(NSArray<NSNumber *> * _Nonnull)externalpurpose;
/// Initialize a new instance of CMPVendor.
/// \param id The id of the vendor.
///
/// \param name The name of the vendor.
///
/// \param purposes The list of purposes related to this vendor.
///
/// \param legitimatePurposes The list of legitimate (aka non-consentable) purposes related to this vendor.
///
/// \param features The list of features related to this vendor.
///
/// \param policyURL The privacy policy’s URL for this vendor.
///
/// \param deletedDate A date of deletion of this vendor has been marked as deleted, nil otherwise.
///
- (nonnull instancetype)initWithId:(NSInteger)id name:(NSString * _Nonnull)name purposes:(NSArray<NSNumber *> * _Nonnull)purposes legitimatePurposes:(NSArray<NSNumber *> * _Nonnull)legitimatePurposes flexiblePurposes:(NSArray<NSNumber *> * _Nonnull)flexiblePurposes specialPurposes:(NSArray<NSNumber *> * _Nonnull)specialPurposes features:(NSArray<NSNumber *> * _Nonnull)features specialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures policyURL:(NSURL * _Nullable)policyURL externalpurpose:(NSArray<NSNumber *> * _Nonnull)externalpurpose deletedDate:(NSDate * _Nullable)deletedDate OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// Representation of a vendor list.
SWIFT_CLASS("_TtC13MAdvertiseCMP13CMPVendorList")
@interface CMPVendorList : NSObject
/// The vendor list version.
@property (nonatomic, readonly) NSInteger vendorListVersion;
/// The date of the last vendor list update.
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
/// A list of purposes.
@property (nonatomic, copy) NSArray<CMPPurpose *> * _Nonnull purposes;
/// A list of features.
@property (nonatomic, readonly, copy) NSArray<CMPFeature *> * _Nonnull features;
/// A list of vendors.
@property (nonatomic, copy) NSArray<CMPVendor *> * _Nonnull vendors;
/// A AskAgain.
@property (nonatomic) double askAgain;
/// The list of activated vendors (ie not deleted).
@property (nonatomic, readonly, copy) NSArray<CMPVendor *> * _Nonnull activatedVendors;
/// The maximum vendor id used in the vendor list.
@property (nonatomic, readonly) NSInteger maxVendorId;
/// The maximum vendor id used in the vendor list.
@property (nonatomic, readonly) NSInteger maxVendorLIgId;
/// The count of vendors in this vendor list.
@property (nonatomic, readonly) NSInteger vendorCount;
/// The count of activated vendors (ie not deleted) in this vendor list.
@property (nonatomic, readonly) NSInteger activatedVendorCount;
/// gvlSpecificationVersion
@property (nonatomic) NSInteger gvlSpecificationVersion;
/// tcfPolicyVersion
@property (nonatomic) NSInteger tcfPolicyVersion;
/// A list of specialPurposes.
@property (nonatomic, copy) NSArray<CMPPurpose *> * _Nonnull specialPurposes;
/// A list of specialFeatures.
@property (nonatomic, copy) NSArray<CMPFeature *> * _Nonnull specialFeatures;
/// A list of stacks.
@property (nonatomic, copy) NSArray<CMPStack *> * _Nonnull stacks;
/// A list of purposes.
@property (nonatomic, copy) NSArray<CMPButton *> * _Nonnull cmpButtons;
/// A privacyPolicyDescription.
@property (nonatomic, copy) NSString * _Nullable privacyPolicyDescription;
/// A ConsentToolTitle.
@property (nonatomic, copy) NSString * _Nullable consentToolTitle;
/// A ConsentToolText.
@property (nonatomic, copy) NSString * _Nullable consentToolText;
/// A list of vendors.
@property (nonatomic, copy) NSArray<CMPExternalVendor *> * _Nonnull externalVendors;
/// A list of externalPurposes.
@property (nonatomic, copy) NSArray<CMPPurpose *> * _Nonnull externalPurposes;
/// A list of googleATPVendors.
@property (nonatomic, copy) NSArray<CMPExternalVendor *> * _Nonnull googleATPVendors;
/// A cache.
@property (nonatomic) double cache;
/// A checksum.
@property (nonatomic, copy) NSString * _Nullable checksum;
/// A closeButton.
@property (nonatomic) NSInteger closeButton;
/// A list of publisherSesticrictions.
@property (nonatomic, copy) NSArray<CMPPublisherRestrictionEntry *> * _Nonnull publisherRestriction;
/// A ios_att_check.
@property (nonatomic) NSInteger iosAttCheck;
/// A hide LI
@property (nonatomic) NSInteger hideLI;
/// Initialize a list of vendors using direct parameters.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     vendorListVersion: The vendor list version.
///   </li>
///   <li>
///     lastUpdated: The date of the last vendor list update.
///   </li>
///   <li>
///     purposes: A list of purposes.
///   </li>
///   <li>
///     vendors: A list of vendors.
///   </li>
/// </ul>
- (nonnull instancetype)initWithVendorListVersion:(NSInteger)vendorListVersion lastUpdated:(NSDate * _Nonnull)lastUpdated purposes:(NSArray<CMPPurpose *> * _Nonnull)purposes features:(NSArray<CMPFeature *> * _Nonnull)features vendors:(NSArray<CMPVendor *> * _Nonnull)vendors askAgain:(double)askAgain gvlSpecificationVersion:(NSInteger)gvlSpecificationVersion tcfPolicyVersion:(NSInteger)tcfPolicyVersion specialPurposes:(NSArray<CMPPurpose *> * _Nonnull)specialPurposes specialFeatures:(NSArray<CMPFeature *> * _Nonnull)specialFeatures stacks:(NSArray<CMPStack *> * _Nonnull)stacks cache:(double)cache privacyPolicyDescription:(NSString * _Nullable)privacyPolicyDescription consentToolTitle:(NSString * _Nullable)consentToolTitle consentToolText:(NSString * _Nullable)consentToolText buttons:(NSArray<CMPButton *> * _Nonnull)buttons externalVendors:(NSArray<CMPExternalVendor *> * _Nonnull)externalVendors externalPurposes:(NSArray<CMPPurpose *> * _Nonnull)externalPurposes googleATPVendors:(NSArray<CMPExternalVendor *> * _Nonnull)googleATPVendors checksum:(NSString * _Nullable)checksum closeButton:(NSInteger)closeButton iosAttCheck:(NSInteger)iosAttCheck hideLI:(NSInteger)hideLI OBJC_DESIGNATED_INITIALIZER;
/// Initialize a list of vendors from a vendor list JSON (if valid).
/// \param jsonData The data representation of the vendor list JSON.
///
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData;
/// Initialize a list of vendors from a vendor list JSON (if valid).
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     jsonData: The data representation of the vendor list JSON.
///   </li>
///   <li>
///     localizedJsonData: The data representation of the localized vendor list JSON if any.
///   </li>
/// </ul>
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData localizedJsonData:(NSData * _Nullable)localizedJsonData;
- (nullable instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict;
/// Retrieve a purpose by id.
/// \param id The id of the purpose that needs to be retrieved.
///
///
/// returns:
/// A purpose corresponding to the id if found, nil otherwise.
- (CMPPurpose * _Nullable)purposeForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a  external purpose by id.
/// \param id The id of the purpose that needs to be retrieved.
///
///
/// returns:
/// A purpose corresponding to the id if found, nil otherwise.
- (CMPPurpose * _Nullable)externalPurposeForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
- (CMPPurpose * _Nullable)purposeLGForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a list LGVendor .
- (NSArray<CMPVendor *> * _Nonnull)listVendorLG SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a list LGPurpose .
- (NSArray<CMPPurpose *> * _Nonnull)listLGPurpose SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isActiveLGWithValueVendor:(NSArray<CMPVendor *> * _Nonnull)valueVendor idPupose:(NSInteger)idPupose SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a special purpose by id.
/// \param id The id of the purpose that needs to be retrieved.
///
///
/// returns:
/// A purpose corresponding to the id if found, nil otherwise.
- (CMPPurpose * _Nullable)specialPurposesForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a feature by id.
/// \param id The id of the feature that needs to be retrieved.
///
///
/// returns:
/// A feature corresponding to the id if found, nil otherwise.
- (CMPFeature * _Nullable)featureForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a SpecialFeature by id.
/// \param id The id of the feature that needs to be retrieved.
///
///
/// returns:
/// A feature corresponding to the id if found, nil otherwise.
- (CMPFeature * _Nullable)specialFeaturesForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a vendor by id.
/// \param id The id of the vendor that needs to be retrieved.
///
///
/// returns:
/// A vendor corresponding to the id if found, nil otherwise.
- (CMPVendor * _Nullable)vendorForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a vendorLG by id.
/// \param id The id of the vendor that needs to be retrieved.
///
///
/// returns:
/// A vendor corresponding to the id if found, nil otherwise.
- (CMPVendor * _Nullable)vendorLGForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a purpose name by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)purposeNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a special purpose name by id.
/// \param id The id of the purposespecialname that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)specialPurposeNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a external purpose name by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)externalPurposeNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a purpose Description by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)purposeDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a purpose Description by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)specialPurposeDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a external purpose Description by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)externalPurposeDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a purposeSpecial name by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)purposeSpecialNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a purpose Description by id.
/// \param id The id of the purpose name that needs to be retrieved.
///
///
/// returns:
/// A purpose name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)purposeSpecialDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a feature name by id.
/// \param id The id of the feature name that needs to be retrieved.
///
///
/// returns:
/// A feature name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)featureNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a feature description by id.
/// \param id The id of the feature name that needs to be retrieved.
///
///
/// returns:
/// A feature description corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)featureDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a Specialfeature name by id.
/// \param id The id of the feature name that needs to be retrieved.
///
///
/// returns:
/// A feature name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)featureSpecilaNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a feature description by id.
/// \param id The id of the feature name that needs to be retrieved.
///
///
/// returns:
/// A feature description corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)featureSpecialDescriptionForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a vendor name by id.
/// \param id The id of the vendor name that needs to be retrieved.
///
///
/// returns:
/// A vendor name corresponding to the id if found, nil otherwise.
- (NSString * _Nullable)vendorNameForId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<CMPPublisherRestrictionEntry *> * _Nonnull)parsePublisherResctrictionWithExternalPurposesPub:(NSArray<CMPPurpose *> * _Nonnull)externalPurposesPub vendorsPub:(NSArray<CMPVendor *> * _Nonnull)vendorsPub SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configuration for a given version of the consent string.
SWIFT_CLASS("_TtC13MAdvertiseCMP16CMPVersionConfig")
@interface CMPVersionConfig : NSObject
/// The lastest version of the consent string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPVersionConfig * _Nonnull LATEST;)
+ (CMPVersionConfig * _Nonnull)LATEST SWIFT_WARN_UNUSED_RESULT;
/// The version of the consent string.
@property (nonatomic, readonly) NSInteger version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MAdvertiseCMP23MadvertiseConsentString")
@interface MadvertiseConsentString : NSObject <NSCopying>
/// The consent string version.
@property (nonatomic, readonly) NSInteger version;
/// The date of the first consent string creation.
@property (nonatomic, readonly, copy) NSDate * _Nonnull created;
/// The date of the last consent string update.
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
/// The id of the last Consent Manager Provider that updated the consent string.
@property (nonatomic, readonly) NSInteger cmpId;
/// The version of the Consent Manager Provider.
@property (nonatomic, readonly) NSInteger cmpVersion;
/// The screen number in the CMP where the consent was given.
@property (nonatomic, readonly) NSInteger consentScreen;
/// The language that the CMP asked for consent in.
@property (nonatomic, readonly, strong) CMPLanguage * _Nonnull consentLanguage;
/// The version of the vendor list used in the most recent consent string update.
@property (nonatomic, readonly) NSInteger vendorListVersion;
/// The maximum vendor id that can be found in the current vendor list.
@property (nonatomic, readonly) NSInteger maxVendorId;
/// An array of allowed purposes id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedPurposes;
/// An array of allowed vendors id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedVendors;
/// The base64 representation of the consent string.
@property (nonatomic, readonly, copy) NSString * _Nonnull consentString;
/// The ‘parsed purpose consents’ string that can be stored in the IABConsent_ParsedPurposeConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedPurposeConsents;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedVendorConsents;
/// Initialize a new instance of CMPConsentString from a vendor list.
/// version:
/// The consent string version.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     created: The date of the first consent string creation.
///   </li>
///   <li>
///     lastUpdated: The date of the last consent string update.
///   </li>
///   <li>
///     cmpId: The id of the last Consent Manager Provider that updated the consent string.
///   </li>
///   <li>
///     cmpVersion: The version of the Consent Manager Provider.
///   </li>
///   <li>
///     consentScreen: The screen number in the CMP where the consent was given.
///   </li>
///   <li>
///     consentLanguage: The language that the CMP asked for consent in.
///   </li>
///   <li>
///     allowedPurposes: An array of allowed purposes id.
///   </li>
///   <li>
///     allowedVendors: An array of allowed vendors id.
///   </li>
///   <li>
///     vendorList: The vendor list corresponding to the consent string.
///   </li>
/// </ul>
///
/// returns:
/// A new instance of CMPConsentString if version is valid, nil otherwise.
- (nullable instancetype)initWithVersion:(NSInteger)version created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors vendorList:(CMPVendorList * _Nonnull)vendorList;
/// Initialize a new instance of CMPConsentString using a vendor list version and a max vendor id.
/// version:
/// The consent string version.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     created: The date of the first consent string creation.
///   </li>
///   <li>
///     lastUpdated: The date of the last consent string update.
///   </li>
///   <li>
///     cmpId: The id of the last Consent Manager Provider that updated the consent string.
///   </li>
///   <li>
///     cmpVersion: The version of the Consent Manager Provider.
///   </li>
///   <li>
///     consentScreen: The screen number in the CMP where the consent was given.
///   </li>
///   <li>
///     consentLanguage: The language that the CMP asked for consent in.
///   </li>
///   <li>
///     vendorListVersion: The version of the vendor list used in the most recent consent string update.
///   </li>
///   <li>
///     maxVendorId: The maximum vendor id that can be found in the current vendor list.
///   </li>
///   <li>
///     allowedPurposes: An array of allowed purposes id.
///   </li>
///   <li>
///     allowedVendors: An array of allowed vendors id.
///   </li>
/// </ul>
///
/// returns:
/// A new instance of CMPConsentString if version is valid, nil otherwise.
- (nullable instancetype)initWithVersion:(NSInteger)version created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage vendorListVersion:(NSInteger)vendorListVersion maxVendorId:(NSInteger)maxVendorId allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors;
/// Initialize a new instance of CMPConsentString from a vendor list.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     versionConfig: The consent string version configuration.
///   </li>
///   <li>
///     created: The date of the first consent string creation.
///   </li>
///   <li>
///     lastUpdated: The date of the last consent string update.
///   </li>
///   <li>
///     cmpId: The id of the last Consent Manager Provider that updated the consent string.
///   </li>
///   <li>
///     cmpVersion: The version of the Consent Manager Provider.
///   </li>
///   <li>
///     consentScreen: The screen number in the CMP where the consent was given.
///   </li>
///   <li>
///     consentLanguage: The language that the CMP asked for consent in.
///   </li>
///   <li>
///     allowedPurposes: An array of allowed purposes id.
///   </li>
///   <li>
///     allowedVendors: An array of allowed vendors id.
///   </li>
///   <li>
///     vendorList: The vendor list corresponding to the consent string.
///   </li>
/// </ul>
- (nonnull instancetype)initWithVersionConfig:(CMPVersionConfig * _Nonnull)versionConfig created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors vendorList:(CMPVendorList * _Nonnull)vendorList;
/// Initialize a new instance of CMPConsentString using a vendor list version and a max vendor id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     versionConfig: The consent string version configuration.
///   </li>
///   <li>
///     created: The date of the first consent string creation.
///   </li>
///   <li>
///     lastUpdated: The date of the last consent string update.
///   </li>
///   <li>
///     cmpId: The id of the last Consent Manager Provider that updated the consent string.
///   </li>
///   <li>
///     cmpVersion: The version of the Consent Manager Provider.
///   </li>
///   <li>
///     consentScreen: The screen number in the CMP where the consent was given.
///   </li>
///   <li>
///     consentLanguage: The language that the CMP asked for consent in.
///   </li>
///   <li>
///     vendorListVersion: The version of the vendor list used in the most recent consent string update.
///   </li>
///   <li>
///     maxVendorId: The maximum vendor id that can be found in the current vendor list.
///   </li>
///   <li>
///     allowedPurposes: An array of allowed purposes id.
///   </li>
///   <li>
///     allowedVendors: An array of allowed vendors id.
///   </li>
/// </ul>
- (nonnull instancetype)initWithVersionConfig:(CMPVersionConfig * _Nonnull)versionConfig created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage vendorListVersion:(NSInteger)vendorListVersion maxVendorId:(NSInteger)maxVendorId allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors;
/// Check if a purpose is allowed by the consent string.
/// \param purposeId The purpose id which should be checked.
///
///
/// returns:
/// true if the purpose is allowed, false otherwise.
- (BOOL)isPurposeAllowedWithPurposeId:(NSInteger)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Check if a vendor is allowed by the consent string.
/// \param vendorId The vendor id which should be checked.
///
///
/// returns:
/// true if the vendor is allowed, false otherwise.
- (BOOL)isVendorAllowedWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Returns a new instance of CMPConsentString from a base64 string.
/// \param base64String The base64 consent string.
///
///
/// returns:
/// A new instance of CMPConsentString if the string is valid, nil otherwise.
+ (MadvertiseConsentString * _Nullable)fromBase64:(NSString * _Nonnull)base64String SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC13MAdvertiseCMP9TCFString")
@interface TCFString : NSObject <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The consent string version.
@property (nonatomic, readonly) NSInteger version;
/// The date of the first consent string creation.
@property (nonatomic, readonly, copy) NSDate * _Nonnull created;
/// The date of the last consent string update.
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
/// The id of the last Consent Manager Provider that updated the consent string.
@property (nonatomic, readonly) NSInteger cmpId;
/// The version of the Consent Manager Provider.
@property (nonatomic, readonly) NSInteger cmpVersion;
/// The screen number in the CMP where the consent was given.
@property (nonatomic, readonly) NSInteger consentScreen;
/// The language that the CMP asked for consent in.
@property (nonatomic, readonly, strong) CMPLanguage * _Nonnull consentLanguage;
/// The version of the vendor list used in the most recent consent string update.
@property (nonatomic, readonly) NSInteger vendorListVersion;
/// The maximum vendor id that can be found in the current vendor list.
@property (nonatomic, readonly) NSInteger maxVendorId;
/// The maximum vendor id that can be found in the current vendor list.
@property (nonatomic, readonly) NSInteger maxVendorLigId;
/// An array of allowed purposes id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedPurposes;
/// An array of allowed vendors id.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull allowedVendors;
/// The base64 representation of the consent string.
@property (nonatomic, readonly, copy) NSString * _Nonnull tcfString;
/// The ‘parsed purpose consents’ string that can be stored in the IABConsent_ParsedPurposeConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedPurposeConsents;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsePurposeLegitimateInterests;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parseSpecialFeatureOptIns;
@property (nonatomic, readonly, copy) NSString * _Nonnull parsePubPurposesConsent;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedVendorConsents;
/// The ‘parsed vendor consents’ string that can be stored in the IABConsent_ParsedVendorConsents key.
@property (nonatomic, readonly, copy) NSString * _Nonnull parsedVendorLegitimateInterestConsents;
/// From the corresponding field in the GVL that was used for obtaining consent. A new policy
/// version invalidates existing strings and requires CMPs to re-establish transparency and
/// consent from users.
/// @since 2.0
/// @return version of policy used within GVL
@property (nonatomic, readonly) NSInteger tcfPolicyVersion;
/// Whether the signals encoded in this TC String were from service-specific storage versus
/// global consesu.org shared storage.
/// @since 2.0
/// @return if signals are service-specific or global
@property (nonatomic, readonly) BOOL isServiceSpecific;
/// Setting this to field to true means that a publisher-run CMP – that is still IAB Europe
/// registered – is using customized Stack descriptions and not the standard stack descriptions
/// defined in the Policies (Appendix A section E). A CMP that services multiple publishers sets
/// this value to false.
/// @since 2.0
/// @return true if if the CMP used non-IAB standard stacks during consent gathering; false
/// otherwise.
@property (nonatomic, readonly) BOOL useNonStandardStacks;
/// The TCF Policies designates certain Features as “special” which means a CMP must afford the
/// user a means to opt in to their use. These “Special Features” are published and numerically
/// identified in the Global Vendor List separately from normal Features.
/// @since 2.0
/// @return the Special Features the Vendor may utilize when performing some declared Purposes
/// processing.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull specialFeatureOptIns;
/// The Purpose’s transparency requirements are met for each Purpose on the legal basis of
/// legitimate interest and the user has not exercised their “Right to Object” to that Purpose.
/// By default or if the user has exercised their “Right to Object” to a Purpose, the
/// corresponding identifier for that Purpose is set to false.
/// @since 2.0
/// @return The purpose identifiers for which the legal basis of legitimate interest are
/// established.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull purposesLITransparency;
/// CMPs can use the PublisherCC field to indicate the legal jurisdiction the publisher is under
/// to help vendors determine whether the vendor needs consent for Purpose 1.
/// In a globally-scoped TC string, this field must always have a value of false. When a CMP
/// encounters a globally-scoped TC String with PurposeOneTreatment set to true then it is
/// considered invalid and the CMP must discard it and re-establish transparency and consent.
/// @since 2.0
/// @return true if Purpose 1 was NOT disclosed; false otherwise.
@property (nonatomic, readonly) BOOL isPurposeOneTreatment;
/// The country code of the country that determines legislation of reference. Commonly, this
/// corresponds to the country in which the publisher’s business entity is established.
/// @since 2.0
/// @return ISO 3166-1 alpha-2 country code
@property (nonatomic, readonly, strong) CMPLanguage * _Nonnull publisherCC;
/// If a user exercises their “Right To Object” to a vendor’s processing based on a legitimate
/// interest.
/// @since 2.0
/// @return vendor identifiers that can process this user based on legitimate interest
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull vendorLegitimateInterest;
/// The restrictions of a vendor’s data processing by a publisher within the context of the users
/// trafficking their digital property.
/// @since 2.0
/// @return the list of publisher restrictions.
@property (nonatomic, copy) NSArray<CMPPublisherRestrictionEntry *> * _Nonnull publisherRestrictions;
/// Part of the Publisher Transparency and Consent segment of a TC String that publishers may use
/// to establish transparency with and receive consent from users for their own legal bases to
/// process personal data or to share with vendors if they so choose.
/// The user’s consent value for each Purpose established on the legal basis of consent, for the
/// publisher
/// The Purposes are numerically identified and published in the Global Vendor List.
/// @since 2.0
/// @return the consent value for each Purpose
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull pubPurposesConsent;
/// Initialize a new instance of CMPTCfConsentString using a vendor list version and a max vendor id.
/// version:
/// The consent string version.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     created: The date of the first consent string creation.
///   </li>
///   <li>
///     lastUpdated: The date of the last consent string update.
///   </li>
///   <li>
///     cmpId: The id of the last Consent Manager Provider that updated the consent string.
///   </li>
///   <li>
///     cmpVersion: The version of the Consent Manager Provider.
///   </li>
///   <li>
///     consentScreen: The screen number in the CMP where the consent was given.
///   </li>
///   <li>
///     consentLanguage: The language that the CMP asked for consent in.
///   </li>
///   <li>
///     vendorListVersion: The version of the vendor list used in the most recent consent string update.
///   </li>
///   <li>
///     maxVendorId: The maximum vendor id that can be found in the current vendor list.
///   </li>
///   <li>
///     allowedPurposes: An array of allowed purposes id.
///   </li>
///   <li>
///     allowedVendors: An array of allowed vendors id.
///   </li>
/// </ul>
///
/// returns:
/// A new instance of CMPConsentString if version is valid, nil otherwise.
- (nullable instancetype)initWithVersion:(NSInteger)version created:(NSDate * _Nonnull)created lastUpdated:(NSDate * _Nonnull)lastUpdated cmpId:(NSInteger)cmpId cmpVersion:(NSInteger)cmpVersion consentScreen:(NSInteger)consentScreen consentLanguage:(CMPLanguage * _Nonnull)consentLanguage vendorListVersion:(NSInteger)vendorListVersion maxVendorId:(NSInteger)maxVendorId maxVendorLigId:(NSInteger)maxVendorLigId allowedPurposes:(NSIndexSet * _Nonnull)allowedPurposes allowedVendors:(NSIndexSet * _Nonnull)allowedVendors tcfPolicyVersion:(NSInteger)tcfPolicyVersion isServiceSpecific:(BOOL)isServiceSpecific useNonStandardStacks:(BOOL)useNonStandardStacks specialFeatureOptIns:(NSIndexSet * _Nonnull)specialFeatureOptIns purposesLITransparency:(NSIndexSet * _Nonnull)purposesLITransparency isPurposeOneTreatment:(BOOL)isPurposeOneTreatment publisherCC:(CMPLanguage * _Nonnull)publisherCC vendorLegitimateInterest:(NSIndexSet * _Nonnull)vendorLegitimateInterest publisherRestrictions:(NSArray<CMPPublisherRestrictionEntry *> * _Nonnull)publisherRestrictions pubPurposesConsent:(NSIndexSet * _Nonnull)pubPurposesConsent;
/// Check if a purpose is allowed by the consent string.
/// \param purposeId The purpose id which should be checked.
///
///
/// returns:
/// true if the purpose is allowed, false otherwise.
- (BOOL)isPurposeAllowedWithPurposeId:(NSInteger)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Check if a vendor is allowed by the consent string.
/// \param vendorId The vendor id which should be checked.
///
///
/// returns:
/// true if the vendor is allowed, false otherwise.
- (BOOL)isVendorAllowedWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Check if a feature is allowed by the tcf string.
/// \param feature The feature id which should be checked.
///
///
/// returns:
/// true if the feature is allowed, false otherwise.
- (BOOL)isSpecialFeatureAllowedWithFeatureId:(NSInteger)featureId SWIFT_WARN_UNUSED_RESULT;
/// Check if a purpose is allowed by the tcf string.
/// \param purpose The purpose id which should be checked.
///
///
/// returns:
/// true if the purpose is allowed, false otherwise.
- (BOOL)isPurposeLITransparencyAllowedWithPurposeId:(NSInteger)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Check if a purpose is allowed by the tcf string.
/// \param purpose The purpose id which should be checked.
///
///
/// returns:
/// true if the purpose is allowed, false otherwise.
- (BOOL)ispurposeLITransparencyAllowedWithPurposeId:(NSInteger)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Check if a vendor Legitimate is allowed by the tcf string.
/// \param vendor The vendor Legitimate id which should be checked.
///
///
/// returns:
/// true if the vendor Legitimate is allowed, false otherwise.
- (BOOL)isVendorLegitimateInterestWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Check if a restriction is allowed by the tcf string.
/// \param restriction The restriction  id which should be checked.
///
///
/// returns:
/// true if the restriction  is allowed, false otherwise.
- (BOOL)isPublisherRestrictionsWithRestrictionId:(NSInteger)restrictionId SWIFT_WARN_UNUSED_RESULT;
/// Check if a pubPurposeConsent is allowed by the tcf string.
/// \param pubPurposeConsent The pubPurposeConsent  id which should be checked.
///
///
/// returns:
/// true if the pubPurposeConsent  is allowed, false otherwise.
- (BOOL)isPubPurposesConsentWithPubPurposeConsentID:(NSInteger)pubPurposeConsentID SWIFT_WARN_UNUSED_RESULT;
+ (TCFString * _Nullable)fromBase64:(NSString * _Nonnull)base64String SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
